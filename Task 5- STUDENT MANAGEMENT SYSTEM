import java.io.*;
import java.util.*;

class Student {
    private String rollNumber;
    private String name;
    private String grade;
    private String department;

    public Student(String rollNumber, String name, String grade, String department) {
        this.rollNumber = rollNumber;
        this.name = name;
        this.grade = grade;
        this.department = department;
    }

    public String getRollNumber() {
        return rollNumber;
    }

    public String getName() {
        return name;
    }

    public String getGrade() {
        return grade;
    }

    public String getDepartment() {
        return department;
    }

    public void setName(String name) {
        this.name = name;
    }

    public void setGrade(String grade) {
        this.grade = grade;
    }

    public void setDepartment(String department) {
        this.department = department;
    }

    public String toString() {
        return "Roll No: " + rollNumber + ", Name: " + name + ", Grade: " + grade + ", Dept: " + department;
    }

    public String toFileString() {
        return rollNumber + "," + name + "," + grade + "," + department;
    }

    public static Student fromFileString(String line) {
        String[] parts = line.split(",");
        if (parts.length == 4) {
            return new Student(parts[0], parts[1], parts[2], parts[3]);
        }
        return null;
    }
}

public class StudentManagementSystem {
    private static final String FILE_NAME = "students.txt";
    private static List<Student> students = new ArrayList<>();

    public static void main(String[] args) {
        loadStudentsFromFile();
        Scanner scanner = new Scanner(System.in);

        while (true) {
            System.out.println("\n🎓 STUDENT MANAGEMENT SYSTEM MENU");
            System.out.println("1. Add Student");
            System.out.println("2. Remove Student");
            System.out.println("3. Search Student");
            System.out.println("4. Display All Students");
            System.out.println("5. Edit Student");
            System.out.println("6. Exit");
            System.out.print("👉 Choose an option (1-6): ");
            int choice = scanner.nextInt();
            scanner.nextLine(); // consume newline

            switch (choice) {
                case 1 -> addStudent(scanner);
                case 2 -> removeStudent(scanner);
                case 3 -> searchStudent(scanner);
                case 4 -> displayStudents();
                case 5 -> editStudent(scanner);
                case 6 -> {
                    saveStudentsToFile();
                    System.out.println("✅ Data saved. Exiting...");
                    return;
                }
                default -> System.out.println("❌ Invalid option. Please choose between 1 and 6.");
            }
        }
    }

    private static void addStudent(Scanner scanner) {
        System.out.print("Enter Roll Number: ");
        String roll = scanner.nextLine().trim();
        if (roll.isEmpty()) {
            System.out.println("⚠️ Roll number can't be empty.");
            return;
        }

        for (Student s : students) {
            if (s.getRollNumber().equalsIgnoreCase(roll)) {
                System.out.println("❌ Student with this roll number already exists.");
                return;
            }
        }

        System.out.print("Enter Name: ");
        String name = scanner.nextLine().trim();
        System.out.print("Enter Grade: ");
        String grade = scanner.nextLine().trim();
        System.out.print("Enter Department: ");
        String dept = scanner.nextLine().trim();

        if (name.isEmpty() || grade.isEmpty() || dept.isEmpty()) {
            System.out.println("⚠️ Fields cannot be empty.");
            return;
        }

        Student student = new Student(roll, name, grade, dept);
        students.add(student);
        System.out.println("✅ Student added successfully.");
    }

    private static void removeStudent(Scanner scanner) {
        System.out.print("Enter Roll Number of student to remove: ");
        String roll = scanner.nextLine().trim();
        boolean found = students.removeIf(s -> s.getRollNumber().equalsIgnoreCase(roll));
        System.out.println(found ? "✅ Student removed." : "❌ Student not found.");
    }

    private static void searchStudent(Scanner scanner) {
        System.out.print("Enter Roll Number to search: ");
        String roll = scanner.nextLine().trim();
        for (Student s : students) {
            if (s.getRollNumber().equalsIgnoreCase(roll)) {
                System.out.println("🔍 Found: " + s);
                return;
            }
        }
        System.out.println("❌ Student not found.");
    }

    private static void editStudent(Scanner scanner) {
        System.out.print("Enter Roll Number to edit: ");
        String roll = scanner.nextLine().trim();
        for (Student s : students) {
            if (s.getRollNumber().equalsIgnoreCase(roll)) {
                System.out.print("Enter new Name (" + s.getName() + "): ");
                s.setName(scanner.nextLine().trim());

                System.out.print("Enter new Grade (" + s.getGrade() + "): ");
                s.setGrade(scanner.nextLine().trim());

                System.out.print("Enter new Department (" + s.getDepartment() + "): ");
                s.setDepartment(scanner.nextLine().trim());

                System.out.println("✅ Student updated.");
                return;
            }
        }
        System.out.println("❌ Student not found.");
    }

    private static void displayStudents() {
        if (students.isEmpty()) {
            System.out.println("⚠️ No student records found.");
            return;
        }

        System.out.println("\n📋 STUDENT LIST:");
        for (Student s : students) {
            System.out.println(s);
        }
    }

    private static void loadStudentsFromFile() {
        try (BufferedReader br = new BufferedReader(new FileReader(FILE_NAME))) {
            String line;
            while ((line = br.readLine()) != null) {
                Student s = Student.fromFileString(line);
                if (s != null) {
                    students.add(s);
                }
            }
        } catch (IOException e) {
            System.out.println("📁 No existing student data found. Starting fresh.");
        }
    }

    private static void saveStudentsToFile() {
        try (BufferedWriter bw = new BufferedWriter(new FileWriter(FILE_NAME))) {
            for (Student s : students) {
                bw.write(s.toFileString());
                bw.newLine();
            }
        } catch (IOException e) {
            System.out.println("❌ Error saving student data: " + e.getMessage());
        }
    }
}
